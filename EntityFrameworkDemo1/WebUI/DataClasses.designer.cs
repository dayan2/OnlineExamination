#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebUI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnlineExam")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertChoice(Choice instance);
    partial void UpdateChoice(Choice instance);
    partial void DeleteChoice(Choice instance);
    partial void InsertExamination(Examination instance);
    partial void UpdateExamination(Examination instance);
    partial void DeleteExamination(Examination instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OnlineExamConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Choice> Choices
		{
			get
			{
				return this.GetTable<Choice>();
			}
		}
		
		public System.Data.Linq.Table<Examination> Examinations
		{
			get
			{
				return this.GetTable<Examination>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _QuestionDes;
		
		private string _Answer1;
		
		private string _Answer2;
		
		private string _Answer3;
		
		private string _Answer4;
		
		private int _Correct;
		
		private System.Nullable<int> _ExaminationID_ID;
		
		private EntitySet<Choice> _Choices;
		
		private EntityRef<Examination> _Examination;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionDesChanging(string value);
    partial void OnQuestionDesChanged();
    partial void OnAnswer1Changing(string value);
    partial void OnAnswer1Changed();
    partial void OnAnswer2Changing(string value);
    partial void OnAnswer2Changed();
    partial void OnAnswer3Changing(string value);
    partial void OnAnswer3Changed();
    partial void OnAnswer4Changing(string value);
    partial void OnAnswer4Changed();
    partial void OnCorrectChanging(int value);
    partial void OnCorrectChanged();
    partial void OnExaminationID_IDChanging(System.Nullable<int> value);
    partial void OnExaminationID_IDChanged();
    #endregion
		
		public Question()
		{
			this._Choices = new EntitySet<Choice>(new Action<Choice>(this.attach_Choices), new Action<Choice>(this.detach_Choices));
			this._Examination = default(EntityRef<Examination>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDes", DbType="NVarChar(MAX)")]
		public string QuestionDes
		{
			get
			{
				return this._QuestionDes;
			}
			set
			{
				if ((this._QuestionDes != value))
				{
					this.OnQuestionDesChanging(value);
					this.SendPropertyChanging();
					this._QuestionDes = value;
					this.SendPropertyChanged("QuestionDes");
					this.OnQuestionDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer1", DbType="NVarChar(MAX)")]
		public string Answer1
		{
			get
			{
				return this._Answer1;
			}
			set
			{
				if ((this._Answer1 != value))
				{
					this.OnAnswer1Changing(value);
					this.SendPropertyChanging();
					this._Answer1 = value;
					this.SendPropertyChanged("Answer1");
					this.OnAnswer1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer2", DbType="NVarChar(MAX)")]
		public string Answer2
		{
			get
			{
				return this._Answer2;
			}
			set
			{
				if ((this._Answer2 != value))
				{
					this.OnAnswer2Changing(value);
					this.SendPropertyChanging();
					this._Answer2 = value;
					this.SendPropertyChanged("Answer2");
					this.OnAnswer2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer3", DbType="NVarChar(MAX)")]
		public string Answer3
		{
			get
			{
				return this._Answer3;
			}
			set
			{
				if ((this._Answer3 != value))
				{
					this.OnAnswer3Changing(value);
					this.SendPropertyChanging();
					this._Answer3 = value;
					this.SendPropertyChanged("Answer3");
					this.OnAnswer3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer4", DbType="NVarChar(MAX)")]
		public string Answer4
		{
			get
			{
				return this._Answer4;
			}
			set
			{
				if ((this._Answer4 != value))
				{
					this.OnAnswer4Changing(value);
					this.SendPropertyChanging();
					this._Answer4 = value;
					this.SendPropertyChanged("Answer4");
					this.OnAnswer4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="Int NOT NULL")]
		public int Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this.OnCorrectChanging(value);
					this.SendPropertyChanging();
					this._Correct = value;
					this.SendPropertyChanged("Correct");
					this.OnCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminationID_ID", DbType="Int")]
		public System.Nullable<int> ExaminationID_ID
		{
			get
			{
				return this._ExaminationID_ID;
			}
			set
			{
				if ((this._ExaminationID_ID != value))
				{
					if (this._Examination.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExaminationID_IDChanging(value);
					this.SendPropertyChanging();
					this._ExaminationID_ID = value;
					this.SendPropertyChanged("ExaminationID_ID");
					this.OnExaminationID_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Choice", Storage="_Choices", ThisKey="ID", OtherKey="QuestionID_ID")]
		public EntitySet<Choice> Choices
		{
			get
			{
				return this._Choices;
			}
			set
			{
				this._Choices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examination_Question", Storage="_Examination", ThisKey="ExaminationID_ID", OtherKey="ID", IsForeignKey=true)]
		public Examination Examination
		{
			get
			{
				return this._Examination.Entity;
			}
			set
			{
				Examination previousValue = this._Examination.Entity;
				if (((previousValue != value) 
							|| (this._Examination.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examination.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Examination.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._ExaminationID_ID = value.ID;
					}
					else
					{
						this._ExaminationID_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examination");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Choices")]
	public partial class Choice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ChoiceDescription;
		
		private System.Nullable<int> _QuestionID_ID;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChoiceDescriptionChanging(string value);
    partial void OnChoiceDescriptionChanged();
    partial void OnQuestionID_IDChanging(System.Nullable<int> value);
    partial void OnQuestionID_IDChanged();
    #endregion
		
		public Choice()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChoiceDescription", DbType="NVarChar(MAX)")]
		public string ChoiceDescription
		{
			get
			{
				return this._ChoiceDescription;
			}
			set
			{
				if ((this._ChoiceDescription != value))
				{
					this.OnChoiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ChoiceDescription = value;
					this.SendPropertyChanged("ChoiceDescription");
					this.OnChoiceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID_ID", DbType="Int")]
		public System.Nullable<int> QuestionID_ID
		{
			get
			{
				return this._QuestionID_ID;
			}
			set
			{
				if ((this._QuestionID_ID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionID_IDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID_ID = value;
					this.SendPropertyChanged("QuestionID_ID");
					this.OnQuestionID_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Choice", Storage="_Question", ThisKey="QuestionID_ID", OtherKey="ID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Choices.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Choices.Add(this);
						this._QuestionID_ID = value.ID;
					}
					else
					{
						this._QuestionID_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examinations")]
	public partial class Examination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private int _CutOffMark;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCutOffMarkChanging(int value);
    partial void OnCutOffMarkChanged();
    #endregion
		
		public Examination()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CutOffMark", DbType="Int NOT NULL")]
		public int CutOffMark
		{
			get
			{
				return this._CutOffMark;
			}
			set
			{
				if ((this._CutOffMark != value))
				{
					this.OnCutOffMarkChanging(value);
					this.SendPropertyChanging();
					this._CutOffMark = value;
					this.SendPropertyChanged("CutOffMark");
					this.OnCutOffMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examination_Question", Storage="_Questions", ThisKey="ID", OtherKey="ExaminationID_ID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Examination = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Examination = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(MAX)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
